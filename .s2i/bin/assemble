#!/bin/bash -e
#
# S2I assemble script for the 'sti-gradle' image.
# The 'assemble' script builds your application source so that it is ready to run.
#
# For more information refer to the documentation:
#	https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#

# Source code provided to STI is at ${HOME}/source
HOME=/opt/app-root/src
LOCAL_SOURCE_DIR=${HOME}/source
mkdir -p $LOCAL_SOURCE_DIR

DEPLOY_DIR=/opt/app-root/deploy
mkdir -p $DEPLOY_DIR

function copy_artifacts() {
  if [ -d $LOCAL_SOURCE_DIR/$1 ]; then
    echo "Copying all JAR artifacts from $LOCAL_SOURCE_DIR/$1 directory into $DEPLOY_DIR for later deployment..."
    cp -v $LOCAL_SOURCE_DIR/$1/*.jar $DEPLOY_DIR 2> /dev/null
  fi
}

# restore gradle dependencies downloaded in a previous build,
# so they do not have to be downloaded again.
# /opt/s2i/destination/artifacts will only be present in the incremental build scenario
# in which the target image name is an existing docker image which contains
# dependencies from a prior build execution.
function restore_saved_artifacts() {
  if [ "$(ls -A /opt/s2i/destination/artifacts/ 2>/dev/null)" ]; then
    echo -n "Restoring saved artifacts from prior build..."
    mv /opt/s2i/destination/artifacts/* /opt/s2i/destination/artifacts/.[!.]* $HOME/.
  fi
}

if [[ "$1" == "-h" ]]; then
	# If the 'sti-gradle' assemble script is executed with '-h' flag,
	# print the usage.
	exec /usr/libexec/s2i/usage
fi

# Copy the source for compilation
cp -ad /tmp/src/* $LOCAL_SOURCE_DIR

echo "---> Installing application source..."
cp -Rf /tmp/src/. ./

echo "---> Building application from source..."

if [ -f "$LOCAL_SOURCE_DIR/build.gradle" ]; then

  # incremental build
  restore_saved_artifacts
        
  echo "Building with gradle. $LOCAL_SOURCE_DIR/build.gradle found."

  pushd $LOCAL_SOURCE_DIR &> /dev/null

  if [ -z "$BUILDER_ARGS" ]; then
    export BUILDER_ARGS="jar"
    # TODO: Specify setting file with -c sss
  fi
  
  pushd . &> /dev/null
  JAVA_HOME=/etc/alternatives/java_sdk_1.8.0

  echo "Found build.gradle... attempting to build with gradle $BUILDER_ARGS"

  echo "Gradle version:"
  gradle --version

  # Execute the actual build
  gradle -s $BUILDER_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from gradle $BUILDER_ARGS"
    exit $ERR
  fi

  echo "Fixing permissions"

  fix-permissions ./
  fix-permissions /opt/app-root

  echo "Copying built jar files into $DEPLOY_DIR..."
  copy_artifacts build/libs

  # clean up after gradle
  gradle clean
  
  popd &> /dev/null
fi

echo "...done"

exit $rc
